name: Test and Build and Infrastructure needed for Cloud Resume Website

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - src/frontend/**
      - terraform/**

env:
  PYTHON_VERSION: 3.11
  BACKEND_PATH: src/backend
  FRONTEND_PATH: src/frontend
  DEPLOYMENT_REGION: eu-west-1
  TF_LOG: INFO
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  BUCKET_TF_STATE_KEY: ${{ secrets.BUCKET_TF_STATE_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  testing:
    runs-on: ubuntu-22.04
    name: Run unit tests for Lambda backend service
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage flake8 moto boto3
      - name: Run flake8 linter for Python
        run: |
          flake8 ${{ env.BACKEND_PATH }} --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 ${{ env.BACKEND_PATH }} --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run pytest with coverage report
        run: |
          pytest -vvv --capture=tee-sys --cov=${{ env.BACKEND_PATH }}

  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-22.04
    needs:
      - testing
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    outputs:
      s3_bucket: ${{ steps.s3_bucket.outputs.stdout }}
      distribution_id: ${{ steps.distribution_id.outputs.stdout }}
    permissions: write-all
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Terraform with specified version
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE" -backend-config="region=$AWS_REGION" -backend-config="key=$BUCKET_TF_STATE_KEY"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
          BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
          BUCKET_TF_STATE_KEY: ${{ secrets.BUCKET_TF_STATE_KEY }}

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
          BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
          BUCKET_TF_STATE_KEY: ${{ secrets.BUCKET_TF_STATE_KEY }}

      - name: Summarize Terraform plan in comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
          BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
          BUCKET_TF_STATE_KEY: ${{ secrets.BUCKET_TF_STATE_KEY }}

      - name: Register output S3 bucket name for further reference
        id: s3_bucket
        run: terraform output -raw aws_s3_website_bucket

      - name: Register output CND distribution ID for further reference
        id: distribution_id
        run: terraform output -raw aws_cloudfront_distribution_id

  invalidate-cdn-cache:
    runs-on: ubuntu-22.04
    needs:
      - terraform
    name: Invalidate CDN cache on CloudFront
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEPLOYMENT_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
      - name: Invalidate CloudFront Cache
        env:
          AWS_CF_DISTRIBUTION_ID: ${{ needs.terraform.outputs.distribution_id }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.AWS_CF_DISTRIBUTION_ID }} --paths "/*"

  sync-s3-bucket:
    runs-on: ubuntu-22.04
    needs:
      - invalidate-cdn-cache
      - terraform
    name: Sync S3 Bucket content
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Sync local frontend files with S3 bucket
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete --exclude ${{ env.FRONTEND_PATH }}/test
        env:
          AWS_S3_BUCKET: ${{ needs.terraform.outputs.s3_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.DEPLOYMENT_REGION }}
          SOURCE_DIR: ${{ env.FRONTEND_PATH }}

  cypress-run:
    name: Run Cypress smoke tests on deployed website
    runs-on: ubuntu-22.04
    needs:
      - sync-s3-bucket
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          project: ./${{ env.FRONTEND_PATH }}/tests
        env:
          CYPRESS_VIDEO_RECORDING: 0
