---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  An Amazon S3 Bucket configured as a static web site hosting.

Parameters:
  ProjectNameTag:
    Type: String
    Default: cloud-resume-challenge
    MinLength: "3"
    MaxLength: "45"
    Description: Value used to indicate the resource as a part of the Cloud Resume Challenge.

  LambdaHandlerFunctionName:
    Type: String
    Default: handler
    Description: Name of the handler Lambda function. Defaults to "handler".

  LambdaPythonRuntime:
    Type: String
    Default: python3.9
    AllowedValues:
      - python3.9
      - python3.8
      - python3.7
    Description: Version of Python Runtime for Lambda. Defaults to python3.9.

  SNSTopicEndpoint:
    Type: String
    Default: piotr_rzepa@o2.pl
    Description: The endpoint that user wants to receive notifications. Defaults to an email address

Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "przepk-${ProjectNameTag}-website"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: project
          Value: !Sub ${ProjectNameTag}

  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Origin Access Control for cloud resume S3 bucket
        Name: !Sub "przepk-${ProjectNameTag}-website-OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudResumeCFDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: cloudResumeS3Origin
            OriginAccessControlId: !GetAtt CloudFrontOAC.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          TargetOriginId: cloudResumeS3Origin
          ViewerProtocolPolicy: redirect-to-https
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          CachePolicyId: b2884449-e4de-46a7-ac36-70bc7f1ddd6d
          AllowedMethods:
            - HEAD
            - GET
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Comment: !Sub ${AWS::StackName} distribution
        PriceClass: PriceClass_100
        IPV6Enabled: false
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: project
          Value: !Sub ${ProjectNameTag}

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: CloudResumeChallengeWebsiteBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref S3Bucket, /*]]
            Condition:
              StringLike:
                "AWS:SourceArn":
                  - !Join [
                      "",
                      [
                        !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/",
                        !Ref CloudResumeCFDistribution,
                      ],
                    ]
      Bucket: !Ref S3Bucket

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowOrigin: "'https://d124b0ft49cngv.cloudfront.net'"
        AllowHeaders: "'Content-Type,Origin'"
        AllowMethods: "'POST,OPTIONS'"
      Tags:
        project: !Sub ${ProjectNameTag}

  DynamoDBVisitorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "CounterName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "CounterName"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Sub "przepk-${ProjectNameTag}-website-visitors"
      Tags:
        - Key: project
          Value: !Sub ${ProjectNameTag}

  VisitorsCounterUpdater:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: !Sub ${LambdaPythonRuntime}
      Handler: !Sub app.${LambdaHandlerFunctionName}
      PackageType: Zip
      Tags:
        project: !Sub ${ProjectNameTag}
      FunctionName: !Sub "przepk-${ProjectNameTag}-website-visitors-handler"
      # SAM Template does not support intrinsic functions in the CodeUri field of AWS::Serverless::Function
      # That is why I was not able to inject the value from Parameters: section
      CodeUri: src/backend/lambda/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBVisitorsTable
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBVisitorsTable
          REGION: eu-west-1
          WEBSITE_CLOUDFRONT_DOMAIN:
            !Join [
              "",
              ["https://", !GetAtt CloudResumeCFDistribution.DomainName],
            ]
      Events:
        ApiGatewayEvent:
          Type: Api
          Properties:
            Path: /visitors
            Method: post
            RestApiId: !Ref ApiGatewayApi

  CloudResumeMetricsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${ProjectNameTag}-sns-topic
      Subscription:
        - Endpoint: !Sub ${SNSTopicEndpoint}
          Protocol: email
      Tags:
        - Key: project
          Value: !Sub ${ProjectNameTag}

  CloudWatchLambdaCriticalErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub "Lambda Erroneous Metrics Alarm for ${VisitorsCounterUpdater}"
      AlarmName: !Sub "Lambda-${VisitorsCounterUpdater}-Error-Alarm"
      AlarmActions:
        - !Ref CloudResumeMetricsSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      # 30% Of total Lambda invocations resulting in error will trigger the alarm
      Threshold: 0.3
      DatapointsToAlarm: 1
      TreatMissingData: missing
      Metrics:
        - Id: e1
          Expression: !Sub "m2/m1*100"
          Label: "Lambda Invocations resulting in error (%)"
          ReturnData: true

        - Id: !Sub m1
          MetricStat:
            Metric:
              # List of AWS Services that publish CloudWatch metrics
              # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Ref VisitorsCounterUpdater
            Period: 300
            Stat: Sum
          # Only evaluated math expression should return data - in this case, errors / invocations
          ReturnData: false

        - Id: m2
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Errors
              Dimensions:
                - Name: FunctionName
                  Value: !Ref VisitorsCounterUpdater
                - Name: Resource
                  Value: !Ref VisitorsCounterUpdater
            Period: 300
            Stat: Sum
          ReturnData: false

Outputs:
  CloudResumeCFDomainName:
    Value:
      !Join ["", ["https://", !GetAtt CloudResumeCFDistribution.DomainName]]
    Description: Name of the Cloud Front distribution used to serve static website content
  ApiGatewayEndpoint:
    Description: "API Gateway Prod stage endpoint"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
